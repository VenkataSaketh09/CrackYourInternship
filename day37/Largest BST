class Solution:
    def __init__(self):
        self.ans=0
    def largestBst(self, root):
        # Your code here
        def postorder(node):
            if not node:
                return True,0,float('inf'),float('-inf')
            left_isBST,left_size,left_min,left_max=postorder(node.left)
            
            right_isBST,right_size,right_min,right_max=postorder(node.right)
            
            if left_isBST and right_isBST and left_max<node.data<right_min:
                
                cur_size = left_size + right_size + 1
                self.ans=max(self.ans,cur_size)
                cur_min=min(left_min,node.data)
                cur_max=max(right_max,node.data)
                return True,cur_size,cur_min,cur_max
            else:
                return False,max(right_size,left_size),0,0
        postorder(root)
        return self.ans
